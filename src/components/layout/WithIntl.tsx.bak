"use client";
import { PropsWithChildren, useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import { NextIntlClientProvider } from "next-intl";
import { loadMessages, DEFAULT_LOCALE, SUPPORTED_LOCALES } from "@/i18n/loadMessages";

type Locale = typeof SUPPORTED_LOCALES[number];

function getStoredLocale(): Locale {
  if (typeof window === "undefined") return DEFAULT_LOCALE;
  const stored = window.localStorage.getItem("lang");
  return (SUPPORTED_LOCALES as readonly string[]).includes(stored || "")
    ? (stored as Locale)
    : DEFAULT_LOCALE;
}

export default function WithIntl({ children }: PropsWithChildren) {
  const pathname = usePathname();
  const [locale, setLocale] = useState<Locale>(getStoredLocale);
  const [messages, setMessages] = useState<Record<string, unknown> | null>(null);

  useEffect(() => {
    let active = true;
    (async () => {
      const l = getStoredLocale();
      const m = await loadMessages(l);
      if (!active) return;
      setLocale(l);
      setMessages(m);
    })();
    return () => { active = false; };
  }, [pathname]);

  // Простой фолбэк до загрузки словаря
  return (
    <NextIntlClientProvider locale={locale} messages={messages ?? {}}>
      {children}
    </NextIntlClientProvider>
  );
}
