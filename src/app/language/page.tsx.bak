
"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { Check, Globe, Search } from "lucide-react";
import { SUPPORTED_LOCALES } from "@/i18n/loadMessages";

type Lang = { code: string; label: string; flag: string };

const ALL_LANGS: Lang[] = [
  { code: "it", label: "Italiano", flag: "🇮🇹" },
  { code: "en", label: "English", flag: "🇬🇧" },
  { code: "de", label: "Deutsch", flag: "🇩🇪" },
  { code: "fr", label: "Français", flag: "🇫🇷" },
  { code: "ru", label: "Русский", flag: "🇷🇺" },
  { code: "zh", label: "中文", flag: "🇨🇳" },
];

export default function LanguagesPage() {
  const router = useRouter();
  const [query, setQuery] = useState("");
  const [selected, setSelected] = useState<string>("en");

  // читаем выбранный язык при монтировании
  useEffect(() => {
    const saved =
      typeof window !== "undefined" ? localStorage.getItem("lang") : null;
    if (saved) setSelected(saved);
  }, []);

  const supported = useMemo(() => new Set(SUPPORTED_LOCALES), []);
  const filtered = useMemo(
    () =>
      ALL_LANGS.filter(
        (l) =>
          l.label.toLowerCase().includes(query.toLowerCase().trim()) ||
          l.code.toLowerCase().includes(query.toLowerCase().trim())
      ),
    [query]
  );

  const handleSelect = (code: string, isSupported: boolean) => {
    if (!isSupported) return; // пока не включаем несозданные словари
    localStorage.setItem("lang", code);
    setSelected(code);
    router.push("/");
  };

  return (
    <main
      className="
        min-h-[100dvh]
        bg-[radial-gradient(1200px_600px_at_50%_-10%,rgba(26,188,156,0.10),transparent_60%),linear-gradient(#f8fafc,#ffffff)]
        text-gray-900
        px-4 py-10
      "
    >
      <div className="mx-auto w-full max-w-md">
        {/* header */}
        <div className="mb-6 rounded-2xl border border-black/5 bg-white/70 backdrop-blur p-5 shadow-sm">
          <div className="flex items-center gap-3">
            <span className="inline-flex h-10 w-10 items-center justify-center rounded-xl border border-black/5 bg-white shadow">
              <Globe className="h-5 w-5" />
            </span>
            <div>
              <h1 className="text-lg font-semibold tracking-tight">
                Select language
              </h1>
              <p className="text-sm text-gray-500">
                Choose your preferred interface language
              </p>
            </div>
          </div>

          {/* search */}
          <div className="relative mt-4">
            <input
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="Search languages…"
              className="w-full rounded-xl border border-black/10 bg-white px-4 py-2.5 pr-10 text-sm outline-none ring-0 transition focus:border-black/20"
            />
            <Search className="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 opacity-60" />
          </div>
        </div>

        {/* list of languages */}
        <ul className="rounded-2xl border border-black/5 bg-white/70 backdrop-blur p-2 shadow-sm">
          {filtered.map((lang) => {
            const isActive = selected === lang.code;
            const isSupported = supported.has(lang.code);
            return (
              <li key={lang.code} className="p-1">
                <button
                  type="button"
                  onClick={() => handleSelect(lang.code, isSupported)}
                  disabled={!isSupported}
                  className={[
                    "group w-full rounded-xl px-3 py-3 transition flex items-center gap-3",
                    "border border-transparent hover:border-black/10 hover:bg-white",
                    isActive ? "ring-2 ring-emerald-400/50" : "",
                    !isSupported ? "opacity-60 cursor-not-allowed" : "",
                  ].join(" ")}
                >
                  <span className="text-xl leading-none select-none">
                    {lang.flag}
                  </span>
                  <div className="flex-1 text-left">
                    <div className="font-medium">{lang.label}</div>
                    <div className="text-[11px] uppercase tracking-wide text-gray-500">
                      {lang.code}
                    </div>
                  </div>

                  {isActive && isSupported ? (
                    <span className="inline-flex h-6 w-6 items-center justify-center rounded-full bg-emerald-500/10">
                      <Check className="h-4 w-4" />
                    </span>
                  ) : isSupported ? (
                    <span className="text-xs text-emerald-600/90 group-hover:text-emerald-700">
                      Select
                    </span>
                  ) : (
                    <span className="text-xs text-gray-400">Soon</span>
                  )}
                </button>
              </li>
            );
          })}
        </ul>
      </div>
    </main>
  );
}
